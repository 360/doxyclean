#!/usr/bin/python

#	Copyright (c) 2008 Matthew Ball
# 
#	Permission is hereby granted, free of charge, to any person
#	obtaining a copy of this software and associated documentation
#	files (the "Software"), to deal in the Software without
#	restriction, including without limitation the rights to use,
#	copy, modify, merge, publish, distribute, sublicense, and/or sell
#	copies of the Software, and to permit persons to whom the
#	Software is furnished to do so, subject to the following
#	conditions:
# 
#	The above copyright notice and this permission notice shall be
#	included in all copies or substantial portions of the Software.
#
#	THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
#	EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES
#	OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
#	NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
#	HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
#	WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
#	FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
#	OTHER DEALINGS IN THE SOFTWARE.

import getopt, sys, os, fnmatch
from xml.dom import minidom

def usage (e):
	sys.stderr.write('doxyclean.py: %s\n' % e)
	sys.stderr.write('''\
	Usage: doxyclean.py [-h] [-i indir] [-o outdir]

	Options:	-h			Converts the cleaned XML to XHTML styled similarly to Apple's documentation
				-i indir	Specifies the directory with XML files generated by Doxygen
				-o outdir	Specifies the directory to place the cleaned XML files

	Converts the XML files generated by Doxygen to 
	be more easily-read and more catered to Objective-C.
''')
	sys.exit(1)
	
def _mkdir(newdir):
    """works the way a good mkdir should :)
        - already exists, silently complete
        - regular file in the way, raise an exception
        - parent directory(ies) does not exist, make them as well
    """
    if os.path.isdir(newdir):
        pass
    elif os.path.isfile(newdir):
        raise OSError("a file with the same name as the desired " \
                      "dir, '%s', already exists." % newdir)
    else:
        head, tail = os.path.split(newdir)
        if head and not os.path.isdir(head):
            _mkdir(head)
        #print "_mkdir %s" % repr(newdir)
        if tail:
            os.mkdir(newdir)
	
if __name__ == '__main__':	
	# Set the default directories
	inputDirectory = os.getcwd()
	outputDirectory = os.getcwd()
	
	shouldConvertToXHTML = 0
	
	opts, args = getopt.getopt(sys.argv[1:], 'i:o:h')
	for option, value in opts:
		if option[1] == 'i':
			inputDirectory = value
		elif option[1] == 'o':
			outputDirectory = value
		elif option[1] == 'h':
			shouldConvertToXHTML = 1
	
	if not os.path.exists(inputDirectory):
		print 'ERROR: Input path does not exist: ' + inputDirectory
		sys.exit(1)
		
	_mkdir(outputDirectory)
		
	xmlOutputDirectory = outputDirectory + "/DoxyCleaned/xml"
	_mkdir(xmlOutputDirectory)
	
	# Set the path for different kinds of objects
	classPath = xmlOutputDirectory + '/Classes'
	categoryPath = xmlOutputDirectory + '/Categories'
	protocolPath = xmlOutputDirectory + '/Protocols'
	
	stylesheetPath = sys.path[0] + '/object.xslt'
		
	for fileName in os.listdir(inputDirectory):
		if fnmatch.fnmatch(fileName, 'interface_*.xml') or fnmatch.fnmatch(fileName, 'protocol_*.xml'):
			
			# Check if the object is documented
			originaldoc = minidom.parse(inputDirectory + '/' + fileName)
			briefList = originaldoc.getElementsByTagName('briefdescription')
			detailList = originaldoc.getElementsByTagName('detaileddescription')
			
			shouldConvert = 0
			
			for briefItem in briefList:
				paraList = briefItem.getElementsByTagName('para')
				if len(paraList) > 0:
					shouldConvert = 1
					break
					
			for detailItem in detailList:
				if shouldConvert:
					break
				paraList = detailItem.getElementsByTagName('para')
				if len(paraList) > 0:
					shouldConvert = 1
					break

			if shouldConvert:
				filePath = xmlOutputDirectory + '/' + fileName
			
				os.system('xsltproc -o "' + filePath + '" "' + stylesheetPath + '" "' + inputDirectory + '/' + fileName + '"')
				
				# We will get values from the xml file
				xmldoc = minidom.parse(filePath)
			
				# Get the object name
				nameList = xmldoc.getElementsByTagName('name')
				objectName = nameList[0].firstChild.data
			
				# Get the object type
				objectList = xmldoc.getElementsByTagName('object')
				objectType = objectList[0].attributes['kind'].value
			
				if objectType == 'class':
					_mkdir(classPath)
					finalPath = classPath
				elif objectType == 'category':
					_mkdir(categoryPath)
					finalPath = categoryPath
				elif objectType == 'protocol':
					_mkdir(protocolPath)
					finalPath = protocolPath
				
				objectName = objectName.replace('(', '_').replace(')', '')
				
				finalPath += '/' + objectName + '.xml'
			
				os.system('mv "' + filePath + '" "' + finalPath + '"')
				
				if shouldConvertToXHTML:
					# Determine if there are any documented parts of this file
					#paraList = xmldoc.getElementsByTagName('para')
					#memberList = xmldoc.getElementsByTagName('member')

					# Only create an XHTML file if the file is documented
					#if len(paraList) > 0 or len(memberList) > 0: <-- TODO: Only convert files which are documented
					if 1:
						xhtmlOutputDirectory = outputDirectory + '/DoxyCleaned/xhtml'
						_mkdir(xhtmlOutputDirectory)
						
						
						
						# Set the path for different kinds of objects
						classXHTMLPath = xhtmlOutputDirectory + '/Classes'
						categoryXHTMLPath = xhtmlOutputDirectory + '/Categories'
						protocolXHTMLPath = xhtmlOutputDirectory + '/Protocols'
				
						if objectType == 'class':
							_mkdir(classXHTMLPath)
							xhtmlPath = classXHTMLPath
						elif objectType == 'category':
							_mkdir(categoryXHTMLPath)
							xhtmlPath = categoryXHTMLPath
						elif objectType == 'protocol':
							_mkdir(protocolXHTMLPath)
							xhtmlPath = protocolXHTMLPath
					
						xhtmlPath += '/' + objectName + '.html'
					
						xhtmlStylesheetPath = sys.path[0] + '/object2xhtml.xslt'
						os.system('xsltproc -o "' + xhtmlPath + '" "' + xhtmlStylesheetPath + '" "' + finalPath + '"')

	
	# Create the index xml file
	indexXMLPath = xmlOutputDirectory + '/index.xml'
	indexXML = minidom.Document()
	
	projectElement = indexXML.createElement("project")
	indexXML.appendChild(projectElement)
	
	# Get each class
	if os.path.exists(classPath):
		for fileName in os.listdir(classPath):
			classFile = minidom.parse(classPath + '/' + fileName)
		
			# Get the object name
			nameList = classFile.getElementsByTagName('name')
			objectName = nameList[0].firstChild.data
		
			# Get the object type
			objectList = classFile.getElementsByTagName('object')
			objectType = objectList[0].attributes['kind'].value
		
			# Create a <object> element
			objectElement = indexXML.createElement("object")
			objectElement.setAttribute("kind", "class")
			projectElement.appendChild(objectElement)
		
			# Create the <name> element
			nameElement = indexXML.createElement("name")
			objectElement.appendChild(nameElement)
			nameText = indexXML.createTextNode(objectName)
			nameElement.appendChild(nameText)
		
	# Get each category
	if os.path.exists(categoryPath):
		for fileName in os.listdir(categoryPath):
			categoryFile = minidom.parse(categoryPath + '/' + fileName)

			# Get the object name
			nameList = categoryFile.getElementsByTagName('name')
			objectName = nameList[0].firstChild.data

			# Get the object type
			objectList = categoryFile.getElementsByTagName('object')
			objectType = objectList[0].attributes['kind'].value

			# Create a <object> element
			objectElement = indexXML.createElement("object")
			objectElement.setAttribute("kind", "category")
			projectElement.appendChild(objectElement)

			# Create the <name> element
			nameElement = indexXML.createElement("name")
			objectElement.appendChild(nameElement)
			nameText = indexXML.createTextNode(objectName)
			nameElement.appendChild(nameText)
			
	# Get each protocol
	if os.path.exists(protocolPath):
		for fileName in os.listdir(protocolPath):
			protocolFile = minidom.parse(protocolPath + '/' + fileName)

			# Get the object name
			nameList = protocolFile.getElementsByTagName('name')
			objectName = nameList[0].firstChild.data

			# Get the object type
			objectList = protocolFile.getElementsByTagName('object')
			objectType = objectList[0].attributes['kind'].value

			# Create a <object> element
			objectElement = indexXML.createElement("object")
			objectElement.setAttribute("kind", "protocol")
			projectElement.appendChild(objectElement)

			# Create the <name> element
			nameElement = indexXML.createElement("name")
			objectElement.appendChild(nameElement)
			nameText = indexXML.createTextNode(objectName)
			nameElement.appendChild(nameText)
	
	# Write the index xml file
	f = open(indexXMLPath, 'w')
	indexXML.writexml(f, "", "\t", "\n")
	f.close()

	if shouldConvertToXHTML:
		# Copy the CSS files over to the new path
		cssPath = sys.path[0] + '/styles'
		os.system('cp -R "' + cssPath + '" "' + xhtmlOutputDirectory + '"')
		
		# Create the index html file
		indexXHTMLStylesheetPath = sys.path[0] + '/index2xhtml.xslt'
		indexXHTMLPath = xhtmlOutputDirectory + '/index.html'
		os.system('xsltproc -o "' + indexXHTMLPath + '" "' + indexXHTMLStylesheetPath + '" "' + indexXMLPath + '"')
	
		